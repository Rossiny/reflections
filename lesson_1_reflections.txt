Como a visualização de um diff entre duas versões de um arquivo ajuda você a ver o bug que foi introduzido?

Isso pode nos ajudar a ver quando o bug foi inserido comparando com outro arquivo que não tenha o bug.


Como ter fácil acesso a todo o histórico de um arquivo pode torná-lo um programador mais eficiente no longo prazo?

Achando os erros rapidamente através da comparação de versões que não tenham bugs com as versões que tenham.


Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit, como ocorre no Git, v. o salvamento automático de versões, como no Google Docs?

Prós: Temos uma organização mais lógica do trabalho que permite o entendimento de forma mais amêna.
Contras: Temos o risco de esquecer de fazer o commit ou acumular muitas mudanças em um mesmo commit.


Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar vários arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?

Porque há alguns tipos de arquivos que só fazem sentido lógico estando juntos, então é necessário que estes sejam salvos juntos. Há também os arquivos em que as mudanças individuais não influenciam em outros arquivos, então não faz sentido salvá-los em conjunto.


Como usar os comandos git log e git diff para visualizar o histórico dos arquivos?

Visualizando a ordem dos commits e comparando as mudanças que foram feitas nos arquivos.


De que modo o controle de versão pode dar a você mais segurança para fazer alterações que podem danificar algo?

Oferecendo a possibilidade de desfazer alterações implementadas.


Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?

Quero usar o Git pra trazer mais eficiência, segurança e colaboratividade para o meu trabalho.